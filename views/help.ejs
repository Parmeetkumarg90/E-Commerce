<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Socket.IO chat</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      margin: 0;
      padding-bottom: 3rem;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    }

    #receiver_detail {
      background: rgba(0, 0, 0, 0.15);
      padding: 0.25rem;
      display: flex;
      height: 3rem;
      backdrop-filter: blur(10px);
    }

    label {
      font-weight: bolder;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    #form {
      background: rgba(0, 0, 0, 0.15);
      padding: 0.25rem;
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      display: flex;
      height: 3rem;
      backdrop-filter: blur(10px);
    }

    #input,
    .input {
      border: none;
      padding: 0 1rem;
      flex-grow: 1;
      border-radius: 2rem;
      margin: 0.25rem;
    }

    #input:focus,
    .input:focus {
      outline: none;
    }

    #form>button {
      background: #333;
      border: none;
      padding: 0 1rem;
      margin: 0.25rem;
      border-radius: 3px;
      outline: none;
      color: #fff;
    }

    #messages {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }

    #messages>li {
      padding: 0.5rem 1rem;
      text-align: right;
      border: 0.5px solid #000;
    }

    h1,
    a {
      padding: 3vmin;
      text-align: center;
      background: #000000;
      color: #fff;
    }
  </style>
</head>

<body>
  <h1>Help From Seller</h1>
  <ul id="messages"></ul>
  <form id="form">
    <input id="input" autocomplete="off" />
    <button>Send</button>
    <button id="resolve">Resolve</button>
  </form>
</body>
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io('',{
    query:{
      userID:getQuery('userID'),
      sellerID:getQuery('sellerID'),
      role:getQuery('role')
    }
  });
  const form = document.querySelector('#form');
  const messages_list = document.querySelector('#messages');
  let input;

  socket.on('connect', () => {
    socket.emit('eachConnect', getProductID(), getQuery('userID'),getQuery('sellerID'),getQuery('role'));
  });

  form.addEventListener('submit', (event) => {
    event.preventDefault();
    input = document.querySelector('#input');
    if (input.value) {
      const timestamp = new Date().toLocaleTimeString();
      const message = `<b>${input.value}</b> <br>${timestamp}`;
      socket.emit('client_messages',  getProductID(), getQuery('userID'),getQuery('sellerID'),getQuery('role'),message);

      addMessage2(input.value + `<br>${timestamp}`);
    }
  });

  document.querySelector('#resolve').addEventListener('click', (event) => {
    event.stopPropagation();
    event.preventDefault();
    const productID = getProductID(), userID = getQuery('userID');
    socket.emit('resolve',getProductID(), getQuery('userID'),getQuery('sellerID'),getQuery('role'));
    window.location.href = '/';
  });

  socket.on("status", ({ online }) => {
    message = online ? '<h4 align="center">Connected</h4>' : '<h4 align="center">Disconnected</h4>';
    addMessage(message);
  });

  socket.on('allChats', (messages) => {
    // messages_list.innerHTML = '';
    messages.forEach((message => {
      addMessage(message);
    }))
  });

  function addMessage(message) {
    const li = document.createElement('li');
    li.innerHTML = message;
    li.style.background = '#bfb9c5';
    li.style.textAlign = 'left';
    messages_list.append(li);
  }

  function addMessage2(message) {
    const li = document.createElement('li');
    li.innerHTML = message;
    messages_list.append(li);
    input.value = '';
  }

  function getQuery(query) {
    const params = new URLSearchParams(window.location.search);

    // Get specific parameter
    return params.get(query) || null;
  }

  function getProductID() {
    let url = new URL(window.location);
    url = url.pathname.split('/');
    return url[url.length - 1];
  }
</script>

</html>